swagger: '2.0'
info:
  version: 1.0.0
  title: Musinsa-API-docs
  description: Musinsa API문서
  servers:
    - description: Musinsa-Clone dev
      url: 'http://localhost:80/'
tags:
  - name: auth
    description: API about auth
paths:
  /api/auth/signup:
    post:
      tags:
        - auth
      summary: 회원가입
      parameters:
        - name: emailCheck
          in: header
          required: true
          description: emailCheck와 phoneCheck 중 선택한 인증 방식으로 한 개만 전달<br>`이메일 인증을 했을 경우 emailCheck만 전달`
        - name: phoneCheck
          in: header
          required: true
          description: emailCheck와 phoneCheck 중 선택한 인증 방식으로 한 개만 전달<br>`휴대폰 인증을 했을 경우 phoneCheck만 전달`
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              loginId:
                type: string
              password:
                type: string
              agreement:
                type: string
                example: 1
              questionType:
                type: string
                example: 6
              questionAnswer:
                type: string
                example: 프로그래밍
              address:
                type: string
                example: 전라남도 서구 금호동 101동 1001호
      responses:
        '200':
          $ref: '#/success'
        '400':
          description: 이메일 인증 또는 휴대폰 인증을 진행하지 않고 회원가입을 진행했을 경우
          schema:
            properties:
              message:
                type: string
                example: 이메일 인증 또는 휴대폰 인증이 완료되지 않은 사용자입니다
        '401':
          description: 로그인 아이디 중복
          schema:
            properties:
              message:
                type: string
                example: 이미 사용중인 아이디 입니다
        '402':
          description: 이메일 중복
          schema:
            properties:
              message:
                type: string
                example: 이미 사용중인 이메일 입니다
        '500':
          $ref: '#/serverError'
  /api/auth/signin:
    post:
      tags:
        - auth
      summary: 로그인
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              loginId:
                type: string
              password:
                type: string
              passwordCheck:
                type: string
      responses:
        '200':
          description: 성공
          schema:
            properties:
              userData:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  nickname:
                    type: string
                  checkedCalendar:
                    type: string
                  ProfileImages:
                    type: object
                    properties:
                      src:
                        type: string
                  refreshToken:
                    type: string
                  accessToken:
                    type: string
        '401':
          description: 존재하지 않는 유저 (로그인 아이디가 틀린 경우)
          schema:
            properties:
              message:
                type: string
                example: null
        '402':
          description: 비밀번호 일치하지 않음 (로그인 아이디는 맞지만 비밀번호가 틀린 경우)
          schema:
            properties:
              message:
                type: string
                example: 패스워드가 일치하지 않습니다!
        '500':
          $ref: '#/serverError'
  /api/auth/logout:
    post:
      tags:
        - auth
      summary: 로그아웃
      parameters:
        - name: Authorization
          in: header
          required: true
      responses:
        '200':
          $ref: '#/success'
  /api/auth/refresh:
    get:
      tags:
        - auth
      summary: 토큰 refresh
      parameters:
        - name: Authorization
          in: header
          required: true
        - name: refresh
          in: header
          required: true
      responses:
        '200':
          description: 성공
          schema:
            properties:
              ok:
                type: boolean
                example: true
              data:
                type: object
                properties:
                  accessToken:
                    type: string
                    exmaple: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjU4MjA4NDQzLCJleHAiOjE2NTgyOTQ4NDN9.xI5ylpNtkeC5wnf4mnqcP3nbFMpm1mKjrHySxLJyN_4
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjU4MjA4NDQzLCJleHAiOjE2NTgyOTQ4NDN9.xI5ylpNtkeC5wnf4mnqcP3nbFMpm1mKjrHySxLJyN_4
        '403':
          description: 'refresh 토큰 발급 도중 access token, refresh token이 모두 헤더에 없는 경우'
          schema:
            properties:
              success:
                type: string
                example: Access token and refresh token are need for refresh!
        '405':
          description: refresh 토큰 발급 도중 토큰에 유저 정보가 없을 경우
          schema:
            properties:
              success:
                type: string
                example: No authorized!
        '406':
          description: refresh 토큰 발급 도중 토큰이 지급되지 않을 경우
          schema:
            properties:
              success:
                type: string
                example: accessToken이 지급되지 않았습니다
        '500':
          $ref: '#/serverError'
  /api/auth/kakao:
    get:
      tags:
        - auth
      summary: 소셜 로그인(카카오)
      responses:
        '200':
          schema:
            properties:
              url:
                type: string
                example: 'https://kauth.kakao.com/oauth/authorize?client_id=b7ac8922efe0c82210458ea8fcee89a4&redirect_uri=http://localhost/api/auth/kakao/callback&response_type=code&scope=profile_nickname,account_email'
  /api/auth/kakao/callback:
    post:
      tags:
        - auth
      summary: 소셜 로그인(카카오)
      responses:
        '200':
          schema:
            properties:
              refreshToken:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NTk1MTI5OTQsImV4cCI6MTY2MDcyMjU5NH0.I-9dst19UegB0a0RLXGND00auSNabUywhfUf97-waRM
              accessToken:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NTk1MTI5OTQsImV4cCI6MTY1OTU5OTM5NH0.vME0u2mgPL1xeu0riuwXnIFyD50fBm2bd9R3zzDpuI4
  /api/auth/authEmail:
    post:
      tags:
        - auth
      summary: 이메일 인증(회원가입 절차)
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                example: sola2014@naver.com
      responses:
        '200':
          schema:
            properties:
              number:
                type: string
                example: 984439
        '400':
          description: 네이버 이메일이 조회되지 않음
          schema:
            properties:
              message:
                type: string
                example: 유효하지 않은 이메일입니다
        '401':
          description: 입력된 이메일로 가입된 아이디가 이미 존재하는 경우
          schema:
            properties:
              message:
                type: string
                example: 이미 회원가입된 이메일입니다
        '500':
          $ref: '#/serverError'
  /api/auth/CheckEmail:
    post:
      tags:
        - auth
      summary: 이메일 인증번호 확인(회원가입 절차)
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                example: sola2014@naver.com
              number:
                type: number
                example: 984439
      responses:
        '200':
          schema:
            properties:
              emailCheck:
                type: string
                example: 1661019108934
        '400':
          description: 이메일 인증 번호 요청 없이 인증 번호 체크를 요청할 경우
          schema:
            properties:
              message:
                type: string
                example: 이메일 인증 시도를 되지 않은 이메일입니다
        '401':
          description: 사용자가 입력한 인증 번호와 서버에서 전송한 인증번호가 일치하지 않을 경우
          schema:
            properties:
              message:
                type: string
                example: 이메일 인증 번호가 일치하지 않습니다
        '500':
          $ref: '#/serverError'
  /api/auth/sendSMS:
    post:
      tags:
        - auth
      summary: 휴대폰 인증번호 전송(회원가입 절차)
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              phoneNumber:
                type: string
                example: 147357318
      responses:
        '200':
          $ref: '#/success'
        '500':
          $ref: '#/serverError'
  /api/auth/checkSMS:
    post:
      tags:
        - auth
      summary: 휴대폰 인증번호 확인(회원가입 절차)
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              phoneNumber:
                type: string
                example: 147357318
              code:
                type: string
                example: 68749
      responses:
        '200':
          schema:
            properties:
              phoneCheck:
                type: string
                example: 1661013976975
        '400':
          description: '인증 시간이 만료된 경우(redis 토큰 만료[180초])'
          schema:
            properties:
              message:
                type: string
                example: 인증 시간이 만료됐습니다
        '401':
          description: 인증 번호가 틀렸을 경우
          schema:
            properties:
              success:
                type: string
                example: 인증 번호가 틀리셨습니다
        '500':
          $ref: '#/serverError'
  /tokenError:
    post:
      tags:
        - auth
      summary: 토큰 에러 모음
      responses:
        '401':
          description: 토큰이 지급되지 않을 경우
          schema:
            properties:
              success:
                type: string
                example: accessToken이 지급되지 않았습니다
        '402':
          description: 토큰이 검증에 실패했거나 만료됐을 경우
          schema:
            properties:
              success:
                type: string
                example: jwt expired
        '403':
          description: 'refresh 토큰 발급 도중 access token, refresh token이 모두 헤더에 없는 경우'
          schema:
            properties:
              success:
                type: string
                example: Access token and refresh token are need for refresh!
        '405':
          description: refresh 토큰 발급 도중 토큰에 유저 정보가 없을 경우
          schema:
            properties:
              success:
                type: string
                example: No authorized!
        '406':
          description: refresh 토큰 발급 도중 토큰이 지급되지 않을 경우
          schema:
            properties:
              success:
                type: string
                example: accessToken이 지급되지 않았습니다
        '407':
          description: refresh 토큰 발급 도중 access 토큰이 만료되지 않았을경우
          schema:
            properties:
              success:
                type: string
                example: Access token is not expired!
  /api/product/productList:
    get:
      tags:
        - product
      summary: 상품 리스트
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: 현재페이지 쿼리입니다. 현재 페이지 인덱스를 보내주세요. 아무것도 지급되지 않을 경우 자동으로 0 처리됩니다<br>`2페이지를 조회할 경우 2`
        - in: query
          name: price
          schema:
            type: integer
          description: '가격필터링용 쿼리입니다 가격 분류 인덱스를 정수로 보내주세요<br>`5만~10만의 상품을 조회할 경우 2`<br>[0 ~ 5만, 2- 5만~10만, 10만~20만, 20만~30만, 30만이상]'
        - in: query
          name: priceMin
          schema:
            type: integer
          description: 사용자지정 최소가격필터용 쿼리입니다. 최소 가격을 정수로 보내주세요<br>`최소가격 3만의 경우 - 30000`
        - in: query
          name: priceMax
          schema:
            type: integer
          description: 사용자지정 최대가격필터용 쿼리입니다. 최대 가격을 정수로 보내주세요<br>`최대가격 10만의 경우 - 100000`
        - in: query
          name: bigCategoryId
          schema:
            type: integer
          description: '상품 카테고리(대) 범주 필터링입니다. 대분류 카테고리 인덱스를 정수로 보내주세요 <br> `상의조회의 경우 1, 아우터조회의 경우 2`<br>대분류 - [''상의'', ''아우터'', ''바지'', ''원피스'', ''스커트'', ''스니커즈'', ''신발'', ''가방'', ''여성 가방'', ''스포츠/용품'', ''모자'', ''양말/레그웨어'', ''속옷'', ''선글라스/안경테'', ''악세서리'', ''시계'', ''주얼리'', ''뷰티'', ''디지털/테크'', ''생활/취미/예술'', ''책/음악/티켓'', ''반려동물'']'
        - in: query
          name: smallCategoryId
          schema:
            type: integer
          description: '상품 카테고리(소) 범주 필터링입니다. 소분류 카테고리 인덱스를 정수로 보내주세요 <br>`백팩 조회의 경우 bigCategoryId:1 && smallCategoryId:1` <br>대분류당 갯수 - [9, 12, 8, 3, 3, 3, 11, 13, 9, 13, 7, 2, 5, 3, 8, 5, 7, 12, 11, 11, 2, 2]'
      responses:
        '200':
          description: 성공 - productData 배열에 담긴체 100개 전달합니다(아래는 예시용 1개)
          schema:
            properties:
              productData:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    productTitle:
                      type: string
                      example: '[MONSTA X 민혁 착용] 리커버리 슬리퍼'
                    productPrice:
                      type: integer
                      example: 305360
                    likes:
                      type: integer
                      example: 222
                    comments:
                      type: integer
                      example: 826
                    ProductImg:
                      type: object
                      properties:
                        src:
                          type: string
                          example: Accessory/Accessory2
        '400':
          description: 상품 조회 결과가 없을 경우
          schema:
            properties:
              message:
                type: string
                example: 상품 조회 결과가 없습니다. 입력값을 다시 확인해주세요
        '500':
          $ref: '#/serverError'
  /api/product/productDetail:
    get:
      tags:
        - product
      summary: 상품 상세보기
      parameters:
        - in: query
          name: productId
          schema:
            type: integer
          required: true
          description: 상품 id 쿼리입니다. 상품 식별 id 를 보내주세요
      responses:
        '200':
          description: 성공 - product 배열에 데이터들이 지급됩니다
          schema:
            properties:
              product:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 33
                    productTitle:
                      type: string
                      example: Chips
                    productPrice:
                      type: integer
                      example: 94160
                    views:
                      type: integer
                      example: 1661
                    likes:
                      type: integer
                      example: 418
                    comments:
                      type: integer
                      example: 541
                    gender:
                      type: integer
                      example: 0
                    season:
                      type: string
                      example: 2021 ALL
                    beRleased:
                      type: string
                      example: 2022-07-29T19:06:04.000Z
                    deliveryFrom:
                      type: boolean
                      example: true
                    deliveryWay:
                      type: boolean
                      example: true
                    deliveryCompany:
                      type: integer
                      example: CJ대한통운
                    nonMemberPrice:
                      type: integer
                      example: 85600
                    rookiePrice:
                      type: integer
                      example: 77040
                    memberPrice:
                      type: integer
                      example: 76184
                    bronzePrice:
                      type: integer
                      example: 75328
                    silverPrice:
                      type: integer
                      example: 74472
                    goldPrice:
                      type: integer
                      example: 73616
                    platinumPrice:
                      type: integer
                      example: 72760
                    diamondPrice:
                      type: integer
                      example: 71904
                    sells:
                      type: integer
                      example: 1843
                    BigCategoryId:
                      type: integer
                      example: 1
                    SmallCategoryId:
                      type: integer
                      example: 1
                    CustomCategories:
                      type: integer
                      example: 33
                    commentCount:
                      type: integer
                      example: 3
                    rated:
                      type: integer
                      example: 4.1
        '400':
          description: 상품 조회 결과가 없을 경우
          schema:
            properties:
              message:
                type: string
                example: 상품 조회 결과가 없습니다. 입력값을 다시 확인해주세요
        '500':
          $ref: '#/serverError'
  /api/product/purchase:
    post:
      tags:
        - product
      summary: 상품 구매하기
      parameters:
        - name: Authorization
          in: header
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              imp_uid:
                type: string
              merchant_uid:
                type: string
              ProductId:
                type: string
              price:
                type: integer
      responses:
        '200':
          description: 성공 - product 배열에 데이터들이 지급됩니다
          schema:
            properties:
              product:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 33
                    productTitle:
                      type: string
                      example: Chips
        '400':
          description: 상품 조회 결과가 없을 경우
          schema:
            properties:
              message:
                type: string
                example: 상품 조회 결과가 없습니다. 입력값을 다시 확인해주세요
        '500':
          $ref: '#/serverError'
  /api/product/addCart:
    post:
      tags:
        - product
      summary: 상품 내 장바구니에 추가
      parameters:
        - name: Authorization
          in: header
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              productId:
                type: string
                example: 1
      responses:
        '200':
          $ref: '#/success'
        '400':
          description: 이미 내 장바구니에 추가한 상품일 경우
          schema:
            properties:
              message:
                type: string
                example: 이미 장바구니에 있는 상품입니다
        '500':
          $ref: '#/serverError'
  /api/product/likeProduct:
    post:
      tags:
        - product
      summary: 상품 좋아요
      parameters:
        - name: Authorization
          in: header
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              productId:
                type: string
                example: 1
      responses:
        '200':
          $ref: '#/success'
        '400':
          description: 이미 좋아요한 상품일 경우
          schema:
            properties:
              message:
                type: string
                example: 이미 좋아요한 상품입니다
        '500':
          $ref: '#/serverError'
  /api/mypage/favoriteGoods:
    get:
      tags:
        - mypage
      summary: 좋아요한 상품 페이지
      parameters:
        - name: Authorization
          in: header
          required: true
      responses:
        '200':
          description: 성공 - likeProduct 배열에 담긴체 좋아요한 상품들을 전달합니다(최대 100개)
          schema:
            properties:
              likeProduct:
                type: array
                items:
                  type: object
                  properties:
                    productPrice:
                      type: integer
                      example: 1
                    likes:
                      type: string
                      example: 845
                    productTitle:
                      type: string
                      example: Car
                    ProductImg:
                      type: object
                      properties:
                        src:
                          type: string
                          example: Accessory/Accessory2
        '400':
          description: 유저의 조회 결과가 없습니다 - 토큰에 대한 사용자 정보가 데이터베이스에 존재하지 않습니다
          schema:
            properties:
              message:
                type: string
                example: 유저의 조회 결과가 없습니다
        '500':
          $ref: '#/serverError'
  /api/mypage/favoriteGoods/del:
    delete:
      tags:
        - mypage
      summary: 좋아요 취소
      parameters:
        - name: Authorization
          in: header
          required: true
        - name: productId
          in: body
          type: object
          properties:
            productId:
              type: array
              items:
                type: integer
                format: int64
              example:
                - 1
                - 2
                - 3
      responses:
        '200':
          $ref: '#/success'
        '400':
          description: productId 에 대한 조회 결과가 없을 경우(입력값이 undefined 인지 확인)
          schema:
            properties:
              message:
                type: string
                example: 입력값을 다시 확인해주세요
        '401':
          description: 유저의 조회 결과가 없습니다 - 토큰에 대한 사용자 정보가 데이터베이스에 존재하지 않습니다
          schema:
            properties:
              message:
                type: string
                example: 유저의 조회 결과가 없습니다
        '402':
          description: 좋아요하지 않은 상품을 삭제 시도할 경우
          schema:
            properties:
              message:
                type: string
                example: 좋아요하지 않은 상품을 삭제 시도하셨습니다
        '500':
          $ref: '#/serverError'
  /api/shoppingBasket/shoppingList:
    get:
      tags:
        - shoppingBasket
      summary: 내 장바구니 리스트
      parameters:
        - name: Authorization
          in: header
          required: true
      responses:
        '200':
          description: 성공 - likeProduct 배열에 담긴체 좋아요한 상품들을 전달합니다(최대 100개)
          schema:
            properties:
              exCart:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 4
                    productTitle:
                      type: string
                      example: Fish
                    productPrice:
                      type: integer
                      example: 57200
                    nonMemberPrice:
                      type: integer
                      example: 52000
                    deliveryFrom:
                      type: boolean
                      example: true
                    deliveryWay:
                      type: boolean
                      example: false
                    deliveryCompany:
                      type: string
                      example: CJ대한통운
        '400':
          description: 유저의 조회 결과가 없습니다 - 토큰에 대한 사용자 정보가 데이터베이스에 존재하지 않습니다
          schema:
            properties:
              message:
                type: string
                example: 유저의 조회 결과가 없습니다
        '500':
          $ref: '#/serverError'
  /api/shoppingBasket/delshoppingList:
    delete:
      tags:
        - shoppingBasket
      summary: 장바구니 상품 삭제
      parameters:
        - name: Authorization
          in: header
          required: true
        - name: productId
          in: body
          type: object
          properties:
            productId:
              type: array
              items:
                type: integer
                format: int64
              example:
                - 1
                - 2
                - 3
      responses:
        '200':
          $ref: '#/success'
        '400':
          description: productId 에 대한 조회 결과가 없을 경우(입력값이 undefined 인지 확인)
          schema:
            properties:
              message:
                type: string
                example: 입력값을 다시 확인해주세요
        '401':
          description: 유저의 조회 결과가 없습니다 - 토큰에 대한 사용자 정보가 데이터베이스에 존재하지 않습니다
          schema:
            properties:
              message:
                type: string
                example: 유저의 조회 결과가 없습니다
        '402':
          description: 내 장바구니에 없는 상품을 삭제할 경우
          schema:
            properties:
              message:
                type: string
                example: 장바구니에 없는 상품을 삭제 시도하셨습니다
        '500':
          $ref: '#/serverError'
success:
  description: 성공
  schema:
    properties:
      success:
        type: boolean
        example: true
serverError:
  description: 서버 에러
  schema:
    properties:
      message:
        type: string
        example: 서버 에러
