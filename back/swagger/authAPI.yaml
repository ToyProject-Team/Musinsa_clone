/api/auth/signup:
  post:
    tags:
      - auth
    summary: 회원가입
    parameters:
      - name: emailCheck
        in: header
        required: true
        description: emailCheck와 phoneCheck 중 선택한 인증 방식으로 한 개만 전달<br>`이메일 인증을 했을 경우 emailCheck만 전달`
      - name: phoneCheck
        in: header
        required: true
        description: emailCheck와 phoneCheck 중 선택한 인증 방식으로 한 개만 전달<br>`휴대폰 인증을 했을 경우 phoneCheck만 전달`
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            loginId:
              type: string
            password:
              type: string
            agreement:
              type: string
              example: 1
            address:
              type: string
              example: 전라남도 서구 금호동 101동 1001호
            email:
              type: string
              example: sola1321@naver.com
            phoneNumber:
              type: string
              example: 01054325612
    responses:
      200:
        $ref: "./openapi.yaml#/success"
      400:
        description: 이메일 인증 또는 휴대폰 인증을 진행하지 않고 회원가입을 진행했을 경우
        schema: 
          properties:
            message:
              type: string
              example: 이메일 인증 또는 휴대폰 인증이 완료되지 않은 사용자입니다
      401:
        description: 로그인 아이디 중복
        schema:
          properties:
            message:
              type: string
              example: 이미 사용중인 아이디 입니다
      402:
        description: 이메일 중복
        schema:
          properties:
            message:
              type: string
              example: 이미 사용중인 이메일 입니다
      403:
        description: 인증한 이메일로 회원가입을 하지 않은경우
        schema:
          properties:
            message:
              type: string
              example: 이메일 인증이 완료된 이메일을 보내야합니다
      405:
        description: 인증한 휴대폰으로 회원가입을 하지 않은경우
        schema:
          properties:
            message:
              type: string
              example: 휴대폰 인증이 완료된 번호를 보내야합니다
      500:
        $ref: "./openapi.yaml#/serverError"

/api/auth/signin:
  post:
    tags:
      - auth
    summary: 로그인
    parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            loginId:
              type: string
            password:
              type: string
            passwordCheck:
              type: string
    responses:
      200:
        description: 성공
        schema:
          properties:
            userData:
              type: object
              properties:
                id:
                  type: integer
                email:
                  type: string
                nickname:
                  type: string
                checkedCalendar:
                  type: string
                ProfileImages:
                  type: object
                  properties:
                    src:
                      type: string
                refreshToken:
                  type: string
                accessToken:
                  type: string
      401:
        description: 존재하지 않는 유저 (로그인 아이디가 틀린 경우)
        schema:
          properties:
            message:
              type: string
              example: 
      402:
        description: 비밀번호 일치하지 않음 (로그인 아이디는 맞지만 비밀번호가 틀린 경우)
        schema:
          properties:
            message:
              type: string
              example: 패스워드가 일치하지 않습니다!
      500:
        $ref: "./openapi.yaml#/serverError"

/api/auth/logout:
  post:
    tags:
      - auth
    summary: 로그아웃
    parameters:
      - name: Authorization
        in: header
        required: true
    responses:
      200:
        $ref: "./openapi.yaml#/success"
/api/auth/refresh:
  get:
    tags:
      - auth
    summary: 토큰 refresh
    parameters:
      - name: Authorization
        in: header
        required: true
      - name: refresh
        in: header
        required: true
    responses:
      200:
        description: 성공
        schema:
          properties:
            ok:
              type: boolean
              example: true
            data:
              type: object
              properties:
                accessToken:
                  type: string
                  exmaple: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjU4MjA4NDQzLCJleHAiOjE2NTgyOTQ4NDN9.xI5ylpNtkeC5wnf4mnqcP3nbFMpm1mKjrHySxLJyN_4"
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjU4MjA4NDQzLCJleHAiOjE2NTgyOTQ4NDN9.xI5ylpNtkeC5wnf4mnqcP3nbFMpm1mKjrHySxLJyN_4"
      403:
        description: refresh 토큰 발급 도중 access token, refresh token이 모두 헤더에 없는 경우
        schema:
          properties:
            success:
              type: string
              example: Access token and refresh token are need for refresh!
      405:
        description: refresh 토큰 발급 도중 토큰에 유저 정보가 없을 경우
        schema:
          properties:
            success:
              type: string
              example: No authorized!
      406:
        description: refresh 토큰 발급 도중 토큰이 지급되지 않을 경우
        schema:
          properties:
            success:
              type: string
              example: accessToken이 지급되지 않았습니다
      500:
        $ref: "./openapi.yaml#/serverError"
/api/auth/kakao:
  get:
    tags:
      - auth
    summary: 소셜 로그인(카카오)
    responses:
      200:
        schema:
          properties:
            url:
              type: string
              example: https://kauth.kakao.com/oauth/authorize?client_id=b7ac8922efe0c82210458ea8fcee89a4&redirect_uri=http://localhost/api/auth/kakao/callback&response_type=code&scope=profile_nickname,account_email

/api/auth/kakao/callback:
  post:
    tags:
      - auth
    summary: 소셜 로그인(카카오)
    responses:
      200:
        schema:
          properties:
            refreshToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NTk1MTI5OTQsImV4cCI6MTY2MDcyMjU5NH0.I-9dst19UegB0a0RLXGND00auSNabUywhfUf97-waRM
            accessToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NTk1MTI5OTQsImV4cCI6MTY1OTU5OTM5NH0.vME0u2mgPL1xeu0riuwXnIFyD50fBm2bd9R3zzDpuI4

/api/auth/authEmail:
  post:
    tags:
      - auth
    summary: 이메일 인증(회원가입 절차)
    parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
              example: sola2014@naver.com
    responses:
      200:
        $ref: "./openapi.yaml#/success"
      400:
        description: 네이버 이메일이 조회되지 않음
        schema:
          properties:
            message:
              type: string
              example: 유효하지 않은 이메일입니다
      500:
        $ref: "./openapi.yaml#/serverError"

/api/auth/checkEmail:
  post:
    tags:
      - auth
    summary: 이메일 인증번호 확인(회원가입 절차)
    parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
              example: sola2014@naver.com
            number:
              type: number
              example: 984439
    responses:
      200:
        schema:
          properties:
            emailCheck: 
              type: string
              example: 1661019108934
      400:
        description: 이메일 인증 번호 요청 없이 인증 번호 체크를 요청할 경우
        schema:
          properties:
            message:
              type: string
              example: 이메일 인증 번호를 요청해야합니다
      401:
        description: 사용자가 입력한 인증 번호와 서버에서 전송한 인증번호가 일치하지 않을 경우
        schema:
          properties:
            message:
              type: string
              example: 이메일 인증 번호가 일치하지 않습니다
      500:
        $ref: "./openapi.yaml#/serverError"
        
/api/auth/sendSMS:
  post:
    tags:
      - auth
    summary: 휴대폰 인증번호 전송(회원가입 절차)
    parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            phoneNumber:
              type: string
              example: 01062077206
    responses:
      200:
        $ref: "./openapi.yaml#/success"
      500:
        $ref: "./openapi.yaml#/serverError"

/api/auth/checkSMS:
  post:
    tags:
      - auth
    summary: 휴대폰 인증번호 확인(회원가입 절차)
    parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            phoneNumber:
              type: string
              example: 01062077206
            code:
              type: string
              example: 68749
    responses:
      200:
        schema:
          properties:
            phoneCheck:
              type: string
              example: 1661013976975
      400:
        description: 인증 시간이 만료된 경우(redis 토큰 만료[180초])
        schema:
          properties:
            message:
              type: string
              example: 인증 시간이 만료됐습니다
      401:
        description: 인증 번호가 틀렸을 경우
        schema:
          properties:
            success:
              type: string
              example: 인증 번호가 틀리셨습니다
      500:
        $ref: "./openapi.yaml#/serverError"
/api/auth/findId:
  post:
    tags:
      - auth
    summary: 아이디 찾기
    parameters:
      - name: emailCheck
        in: header
        required: true
        description: emailCheck와 phoneCheck 중 선택한 인증 방식으로 한 개만 전달<br>`이메일 인증을 했을 경우 emailCheck만 전달`
      - name: phoneCheck
        in: header
        required: true
        description: emailCheck와 phoneCheck 중 선택한 인증 방식으로 한 개만 전달<br>`휴대폰 인증을 했을 경우 phoneCheck만 전달`
    responses:
      200:
        schema:
          properties:
            loginId:
              type: string
              example: eos0103
      400:
        description: 인증번호를 입력하지 않거나 인증 번호가 만료된 경우
        schema:
          properties:
            message:
              type: string
              example: 인증번호를 입력하지 않거나 인증 번호가 만료되었습니다
      401:
        description: 해당 휴대폰 번호를 가진 유저가 없을 경우
        schema:
          properties:
            success:
              type: string
              example: 해당 휴대폰 번호를 가진 유저의 조회 결과가 없습니다
      402:
        description: 해당 이메일을 가진 유저가 없을 경우
        schema:
          properties:
            success:
              type: string
              example: 해당 이메일을 가진 유저의 조회 결과가 없습니다
      500:
        $ref: "./openapi.yaml#/serverError"

/api/auth/findPassword:
  post:
    tags:
      - auth
    summary: 비밀번호 찾기
    parameters:
      - name: phoneCheck
        in: header
        required: true
        description: /api/auth/checkSMS 에서 발급받는 토큰
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            loginId:
              type: string
              example: eos01033
            phoneNumber:
              type: number
              example: 01064354123
    responses:
      200:
        schema:
          properties:
            changePasswordToken: 
              type: string
              example: 1661055228577
      400:
        description: loginId가 전달되지 않았을 경우
        schema:
          properties:
            message:
              type: string
              example: 로그인 아이디가 전달되지 않았습니다
      401:
        description: loginId 에 대한 유저 조회 결과가 없는 경우
        schema:
          properties:
            message:
              type: string
              example: 해당 로그인 아이디에 대한 유저 조회 결과가 없습니다
      402:
        description: SMS 인증을 하지않고 비밀번호 찾기를 시도할 경우
        schema:
          properties:
            message:
              type: string
              example: SMS 인증 시도하셔야합니다. 시도하셨다면 세션 스토리지의 phoneCheck가 headers로 전달됐는지 확인해주세요
      403:
        description: loginId의 주인의 핸드폰 번호가 아닌 경우
        schema:
          properties:
            message:
              type: string
              example: 로그인 아이디로 조회된 유저에 대한 전화번호가 아닙니다
      500:
        $ref: "./openapi.yaml#/serverError"

/api/auth/changePassword:
  post:
    tags:
      - auth
    summary: 비밀번호 변경
    parameters:
      - name: changepasswordtoken
        in: header
        required: true
        description: /api/auth/findPassword API 에서 발급받는 토큰
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            password:
              type: string
              example: weqqwe12412
    responses:
      200:
        schema:
          properties:
            changePasswordToken: 
              type: string
              example: 1661055228577
      400:
        description: 토큰을 입력하지 않거나 인증 번호가 만료되었을 경우
        schema:
          properties:
            message:
              type: string
              example: 토큰을 입력하지 않거나 인증 번호가 만료되었습니다
      401:
        description: password 가 전달되지 않았을 경우
        schema:
          properties:
            message:
              type: string
              example: 암호가 전달되지 않았습니다
      500:
        $ref: "./openapi.yaml#/serverError"

/tokenError:
  post:
    tags:
      - auth
    summary: 토큰 에러 모음
    responses:
      401:
        description: 토큰이 지급되지 않을 경우
        schema:
          properties:
            success:
              type: string
              example: accessToken이 지급되지 않았습니다
      402:
        description: 토큰이 검증에 실패했거나 만료됐을 경우
        schema:
          properties:
            success:
              type: string
              example: jwt expired
      403:
        description: refresh 토큰 발급 도중 access token, refresh token이 모두 헤더에 없는 경우
        schema:
          properties:
            success:
              type: string
              example: Access token and refresh token are need for refresh!
      405:
        description: refresh 토큰 발급 도중 토큰에 유저 정보가 없을 경우
        schema:
          properties:
            success:
              type: string
              example: No authorized!
      406:
        description: refresh 토큰 발급 도중 토큰이 지급되지 않을 경우
        schema:
          properties:
            success:
              type: string
              example: accessToken이 지급되지 않았습니다
      407:
        description: refresh 토큰 발급 도중 access 토큰이 만료되지 않았을경우
        schema:
          properties:
            success:
              type: string
              example: Access token is not expired!
$ref: "./productAPI.yaml"

